;part 1 
(list 1 2 3)
(list 1 2 3 5 6 7 8)
(define list1 (list 0 1 2 3 4 5 6 7 8 9))
(display list1)
(newline)
(list "abe" "bea" "cal" "deb")
(define bintree (list (list 1 2) (list 3 4)))
(display bintree)
(newline)
(define arry3*3 (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
(display arry3*3)
(newline)
'()
(list)
(null? '())
(null? (list))
(null? (list 1 2 3))
; part 2
(car (list 1 2 3))
(cdr (list 1 2 3))
(define list2 (list 0 1 2 3 4 5 6 7 8 9))
(newline)
(car list2)
(cdr list2)
(cdr (cdr list2))
(cdr (cdr (cdr list2)))
(car (cdr (cdr (cdr list2))))
(display list2)
(newline)
(cdr list2)
(cddr list2)
(cdddr list2)
(car (cdddr list2))
(cadddr list2)
(define list3 (list
    (list (list 1 2) (list 3 4) (list 5 6) )
    (list (list 7 8) (list 9 10) (list 11 12) )
    (list (list 13 14) (list 15 16) (list 17 18 ) )
) )
(display list3)
(newline)
(car list3)
(caar list3)
(caaar list3)
(cdr list3)
(cadr list3)
(cdar list3)
(cdadr list3)
;part 3
(cons 1 2)
(car (cons 1 2))
(cdr (cons 1 2))
(define list4 (cons (cons 1 2) (cons 3 4)))
(display list4)
(newline)
(car list4)
(cdr list4)
(newline)
(car list4)
(cdr list4)
(caar list4)
(cadr list4)
(cdar list4)
(cddr list4)
(cons 1 '())
(cons '() 1)
(cons 1 (cons 2 '()))
(cons 1 (cons 2 (cons 3 '())))
(cons 1 (cons 2 (cons 3 (cons 4 '()))))
;part 4
(define (make-rat n d) (cons n d))
(define (numer rat)(car rat))
(define (denom rat)(cdr rat))
(define (print-rat rat)
  (display (numer rat))
  (display "/")
  (display (denom rat))
  (newline))
(define one-half(make-rat 1 2))
(define one-third(make-rat 1 3))
(display one-half)
(newline)
(print-rat one-half)
(display one-third)
(newline)
(print-rat one-third)
;part 5
(display "hi Ben, part 5 starts here")
(newline)
(define (add-rat rat1 rat2)
    (make-rat (+ (* (numer rat1) (denom rat2))
                 (* (numer rat2) (denom rat1)))
                  (* (denom rat1) (denom rat2))))

(define (minus-rat rat1 rat2)
    (make-rat (- (* (numer rat1) (denom rat2))
                 (* (numer rat2) (denom rat1)))
              (* (denom rat1) (denom rat2))))

(define (multi-rat rat1 rat2)
  (make-rat (* (numer rat1) (numer rat2))
            (* (denom rat1) (denom rat2))))

(define (divi-rat rat1 rat2)
  (make-rat (* (numer rat1) (denom rat2))
            (* (numer rat2) (denom rat1))))
;define some fraction number
(define one-four ( make-rat 1 4))
(define one-five ( make-rat 1 5))
(define one-six ( make-rat 1 6))
(define one-seven ( make-rat 1 7))
(define one-eight ( make-rat 1 8))
(define one-nine (make-rat 1 9))
(define one-ten (make-rat 1 10))
(define one-eleven (make-rat 1 11))
(define one-twelve (make-rat 1 12))
(define one-thirteen (make-rat 1 13))
(define one-fourteen (make-rat 1 14))
;test on add/minus/multi/division
(print-rat (add-rat one-ten one-third))
(print-rat (minus-rat one-seven one-third))
(print-rat (multi-rat one-five one-eight))
(print-rat (divi-rat one-twelve one-thirteen))